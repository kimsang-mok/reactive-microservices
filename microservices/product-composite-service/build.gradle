plugins {
    id 'java'
    id 'org.springframework.boot' version '3.2.0'
    id 'io.spring.dependency-management' version '1.1.4'
}

group = 'com.kimsang.microservices.composite.product'
version = '1.0.0-SNAPSHOT'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}
ext {
    springCloudVersion = "2023.0.0"
    resilience4jVersion = "2.1.0"
}

repositories {
    mavenCentral()
}

jar {
    enabled = false
}

springBoot {
    buildInfo()
}

dependencies {
    implementation project(":api")
    implementation project(":util")
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.springframework.boot:spring-boot-starter-webflux'
    implementation 'org.springframework.cloud:spring-cloud-starter-stream-rabbit'
    implementation 'org.springframework.cloud:spring-cloud-starter-stream-kafka'

    implementation 'io.netty:netty-resolver-dns-native-macos:4.1.95.Final:osx-aarch_64'

    implementation 'org.springframework.cloud:spring-cloud-starter-netflix-eureka-client'

    implementation 'org.springdoc:springdoc-openapi-starter-webflux-ui:2.5.0'

    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.security:spring-security-oauth2-resource-server'
    implementation 'org.springframework.security:spring-security-oauth2-jose'

    implementation 'org.springframework.cloud:spring-cloud-starter-config'
    implementation 'org.springframework.retry:spring-retry'

    implementation 'org.springframework.cloud:spring-cloud-starter-loadbalancer'

    implementation 'io.micrometer:micrometer-tracing-bridge-otel'
    implementation 'io.opentelemetry:opentelemetry-exporter-zipkin'

    implementation 'org.springframework.boot:spring-boot-starter-aop'
    implementation "io.github.resilience4j:resilience4j-spring-boot3:${resilience4jVersion}"
    implementation "io.github.resilience4j:resilience4j-reactor:${resilience4jVersion}"

    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'io.projectreactor:reactor-test'

    testImplementation("org.springframework.cloud:spring-cloud-stream-test-binder")

    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

dependencyManagement {
    imports {
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
    }
    // to avoid spring cloud overriding the version used with the older version of resilience4j
    dependencies {
        dependency "io.github.resilience4j:resilience4j-spring:${resilience4jVersion}"
        dependency "io.github.resilience4j:resilience4j-annotations:${resilience4jVersion}"
        dependency "io.github.resilience4j:resilience4j-consumer:${resilience4jVersion}"
        dependency "io.github.resilience4j:resilience4j-core:${resilience4jVersion}"
        dependency "io.github.resilience4j:resilience4j-circuitbreaker:${resilience4jVersion}"
        dependency "io.github.resilience4j:resilience4j-ratelimiter:${resilience4jVersion}"
        dependency "io.github.resilience4j:resilience4j-retry:${resilience4jVersion}"
        dependency "io.github.resilience4j:resilience4j-bulkhead:${resilience4jVersion}"
        dependency "io.github.resilience4j:resilience4j-timelimiter:${resilience4jVersion}"
        dependency "io.github.resilience4j:resilience4j-micrometer:${resilience4jVersion}"
        dependency "io.github.resilience4j:resilience4j-circularbuffer:${resilience4jVersion}"
    }
}

tasks.named('test') {
    useJUnitPlatform()
}
